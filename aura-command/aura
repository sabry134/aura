#!/bin/sh

# Files to store state and configuration
START_TIME_FILE="$HOME/.aura_start_time"       # When the bot was started
RUNNING_PID_FILE="$HOME/.aura_running_pid"       # Process ID of the running bot
LOG_FILE="$HOME/.aura_bot.log"                   # Bot log file (assumed)
ERROR_LOG_FILE="$HOME/.aura_errors.log"          # Error log file (assumed)
GUILDS_FILE="$HOME/.aura_guilds"                 # Fallback guild list file (assumed)
WEBHOOK_FILE="$HOME/.aura_webhooks"              # List of webhook URLs (assumed)
TOKEN_FILE="$HOME/.aura_token"                   # Bot token storage
CLIENT_ID_FILE="$HOME/.aura_client_id"           # Bot client ID storage

error() {
    echo "Error: $1" >&2
    exit 1
}

####################################
# Token and Client ID Management
####################################

# Ensures a token is set; if not, exits with an error.
require_token() {
    if [ ! -f "$TOKEN_FILE" ]; then
        error "Bot token is not set. Use 'aura set-token [token]' to set the token."
    fi
}

# Set the bot token
set_token() {
    TOKEN="$1"
    [ -z "$TOKEN" ] && error "Usage: aura set-token [token]"
    echo "$TOKEN" > "$TOKEN_FILE"
    echo "Token set."
}

# Remove the bot token
remove_token() {
    if [ -f "$TOKEN_FILE" ]; then
        rm "$TOKEN_FILE"
        echo "Token removed."
    else
        echo "No token is set."
    fi
}

# Set the bot client ID
set_clientid() {
    CLIENTID="$1"
    [ -z "$CLIENTID" ] && error "Usage: aura set-clientid [client_id]"
    echo "$CLIENTID" > "$CLIENT_ID_FILE"
    echo "Client ID set."
}

# Remove the bot client ID
remove_clientid() {
    if [ -f "$CLIENT_ID_FILE" ]; then
        rm "$CLIENT_ID_FILE"
        echo "Client ID removed."
    else
        echo "No client ID is set."
    fi
}

####################################
# Utility Functions
####################################

# Cleanup for foreground processes
cleanup() {
    [ -f "$START_TIME_FILE" ] && { rm "$START_TIME_FILE"; echo "Bot stopped, timer reset."; }
    [ -f "$RUNNING_PID_FILE" ] && rm "$RUNNING_PID_FILE"
}

# Calculate and display bot uptime
uptime_cmd() {
    if [ ! -f "$START_TIME_FILE" ]; then
        echo "Error: Bot has not started yet."
        exit 1
    fi
    START_TIME=$(cat "$START_TIME_FILE")
    CURRENT_TIME=$(date +%s)
    DIFF=$((CURRENT_TIME - START_TIME))
    DAYS=$((DIFF / 86400))
    HOURS=$(( (DIFF % 86400) / 3600 ))
    MINUTES=$(( (DIFF % 3600) / 60 ))
    SECONDS=$((DIFF % 60))
    echo "Bot uptime: ${DAYS}d ${HOURS}h ${MINUTES}m ${SECONDS}s"
}

####################################
# Bot Control Functions
####################################

# Run the bot file; BACKGROUND=1 uses pm2, else foreground.
run_bot() {
    FILE="$1"
    BACKGROUND="$2"
    if [ ! -f "$FILE" ]; then
        error "File '$FILE' not found."
    fi
    date +%s > "$START_TIME_FILE"
    if [ "$BACKGROUND" -eq 1 ]; then
        command -v pm2 >/dev/null 2>&1 || error "pm2 is required but not installed. Install it with 'npm install -g pm2'"
        echo "Running '$FILE' in background using pm2..."
        if pm2 list | grep -q "aura-$FILE"; then
            echo "Bot is already running in the background using pm2."
        else
            pm2 start "$FILE" --name "aura-$FILE"
        fi
        PM2_PID=$(pm2 pid "aura-$FILE")
        echo "$PM2_PID" > "$RUNNING_PID_FILE"
    else
        echo "Running '$FILE' normally..."
        trap cleanup EXIT
        node "$FILE" &
        echo "$!" > "$RUNNING_PID_FILE"
        wait
    fi
}

# Restart the bot with the provided file and mode (-b for background)
restart_bot() {
    FILE="$1"
    MODE=""
    if [ "$2" = "-b" ]; then
        MODE="-b"
    fi
    if [ -f "$RUNNING_PID_FILE" ]; then
        PID=$(cat "$RUNNING_PID_FILE")
        if kill -0 "$PID" >/dev/null 2>&1; then
            echo "Stopping the bot..."
            kill "$PID"
            wait "$PID" 2>/dev/null
            echo "Bot stopped."
        fi
        rm "$RUNNING_PID_FILE"
    fi
    echo "Restarting the bot..."
    if [ "$MODE" = "-b" ]; then
        command -v pm2 >/dev/null 2>&1 || error "pm2 is required but not installed. Install it with 'npm install -g pm2'"
        if pm2 list | grep -q "aura-$FILE"; then
            pm2 restart "aura-$FILE" || error "Failed to restart bot with pm2."
        else
            pm2 start "$FILE" --name "aura-$FILE"
        fi
        PM2_PID=$(pm2 pid "aura-$FILE")
        echo "$PM2_PID" > "$RUNNING_PID_FILE"
    else
        node "$FILE" &
        echo "$!" > "$RUNNING_PID_FILE"
        trap cleanup EXIT
        wait
    fi
    date +%s > "$START_TIME_FILE"
}

# Stop the bot (no file required)
stop_bot() {
    if [ -f "$RUNNING_PID_FILE" ]; then
        PID=$(cat "$RUNNING_PID_FILE")
        if kill -0 "$PID" >/dev/null 2>&1; then
            echo "Stopping the bot..."
            kill "$PID"
            wait "$PID" 2>/dev/null
            echo "Bot stopped."
        fi
        rm "$RUNNING_PID_FILE"
    fi
    if command -v pm2 >/dev/null 2>&1; then
        if pm2 list | grep -q "aura-"; then
            echo "Stopping PM2-managed bot..."
            pm2 delete all 2>/dev/null
        fi
    fi
    [ -f "$START_TIME_FILE" ] && rm "$START_TIME_FILE"
}

####################################
# Bot Info Functions
####################################

# Display internal debugging information
debug_info() {
    echo "----- Bot Debug Information -----"
    if [ -f "$START_TIME_FILE" ]; then
        START_TIME=$(cat "$START_TIME_FILE")
        echo "Start Time (epoch): $START_TIME"
        echo "Uptime: $(uptime_cmd)"
    else
        echo "Start Time: Not set (bot may not be running)"
    fi
    if [ -f "$RUNNING_PID_FILE" ]; then
        echo "Running PID: $(cat "$RUNNING_PID_FILE")"
    else
        echo "Running PID: Not available"
    fi
    if command -v pm2 >/dev/null 2>&1; then
        echo "PM2 Process List:"
        pm2 list
    else
        echo "PM2: Not installed"
    fi
    echo "---------------------------------"
}

# Show status: uptime, process resource usage, system load, and ping
status() {
    echo "----- Bot Status -----"
    if [ -f "$START_TIME_FILE" ]; then
        uptime_info=$(uptime_cmd)
        echo "$uptime_info"
    else
        echo "Bot uptime: Not available (bot may not be running)"
    fi
    if [ -f "$RUNNING_PID_FILE" ]; then
        PID=$(cat "$RUNNING_PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            proc_usage=$(ps -p "$PID" -o %cpu,%mem --no-headers)
            echo "Process CPU and Memory usage (%CPU, %MEM): $proc_usage"
        else
            echo "Process is not running."
        fi
    else
        echo "Process PID not found."
    fi
    sys_load=$(uptime_cmd | awk -F'load average:' '{ print $2 }')
    echo "System load averages:$sys_load"
    if command -v ping >/dev/null 2>&1; then
        ping_out=$(ping -c 1 google.com | grep 'time=')
        if [ -n "$ping_out" ]; then
            ping_time=$(echo "$ping_out" | sed -n 's/.*time=\([0-9.]*\) ms.*/\1/p')
            echo "Ping to google.com: ${ping_time} ms"
        else
            echo "Ping: Not available."
        fi
    else
        echo "Ping command not available."
    fi
    echo "----------------------"
}

####################################
# Additional Bot Commands
####################################

# Fetch latest logs from the bot (default: 20 lines)
logs() {
    LINES="${1:-20}"
    if [ -f "$LOG_FILE" ]; then
        tail -n "$LINES" "$LOG_FILE"
    else
        echo "No logs available."
    fi
}

# Show latest errors and stack traces (default: 20 lines)
errors() {
    if [ -f "$ERROR_LOG_FILE" ]; then
        tail -n 20 "$ERROR_LOG_FILE"
    else
        echo "No error logs available."
    fi
}

# Set the botâ€™s presence status (e.g., online, idle, dnd)
setstatus() {
    require_token
    STATUS="$1"
    [ -z "$STATUS" ] && error "Usage: aura setstatus [status]"
    echo "Setting bot status to '$STATUS'..."
    echo "$STATUS" > "$HOME/.aura_status"
}

# Set bot activity (e.g., Playing, Watching, Listening)
setactivity() {
    require_token
    TYPE="$1"
    shift
    MESSAGE="$*"
    [ -z "$TYPE" ] || [ -z "$MESSAGE" ] && error "Usage: aura setactivity [type] [message]"
    echo "Setting bot activity: Type='$TYPE', Message='$MESSAGE'"
    echo "$TYPE: $MESSAGE" > "$HOME/.aura_activity"
    echo "Activity set. Restart the bot to apply changes."
}

# Blacklist a guild (ban a server from using the bot)
blacklistguild() {
    require_token
    GUILD_ID="$1"
    [ -z "$GUILD_ID" ] && error "Usage: aura blacklistguild [guild_id]"
    echo "$GUILD_ID" >> "$HOME/.aura_blacklist"
    echo "Guild '$GUILD_ID' added to blacklist."
}

# Remove a guild from the blacklist
whitelistguild() {
    require_token
    GUILD_ID="$1"
    [ -z "$GUILD_ID" ] && error "Usage: aura whitelistguild [guild_id]"
    if [ -f "$HOME/.aura_blacklist" ]; then
        grep -v "^$GUILD_ID$" "$HOME/.aura_blacklist" > "$HOME/.aura_blacklist.tmp" && mv "$HOME/.aura_blacklist.tmp" "$HOME/.aura_blacklist"
        echo "Guild '$GUILD_ID' removed from blacklist."
    else
        echo "Blacklist file not found."
    fi
}

# Add a webhook URL for bot logs
webhook_add() {
    require_token
    URL="$1"
    [ -z "$URL" ] && error "Usage: aura webhook add [url]"
    echo "$URL" >> "$WEBHOOK_FILE"
    echo "Webhook '$URL' added."
}

# Remove a webhook URL from the bot
webhook_remove() {
    require_token
    URL="$1"
    [ -z "$URL" ] && error "Usage: aura webhook remove [url]"
    if [ -f "$WEBHOOK_FILE" ]; then
        grep -v "^$URL$" "$WEBHOOK_FILE" > "$WEBHOOK_FILE.tmp" && mv "$WEBHOOK_FILE.tmp" "$WEBHOOK_FILE"
        echo "Webhook '$URL' removed."
    else
        echo "No webhook file found."
    fi
}

# List all guilds the bot is in via Discord API (if possible)
guilds() {
    require_token
    TOKEN=$(cat "$TOKEN_FILE")
    echo "Fetching guilds from Discord API..."
    RESPONSE=$(curl -s -H "Authorization: Bot $TOKEN" "https://discord.com/api/v10/users/@me/guilds")
    # If jq is available, pretty-print the JSON; otherwise, print raw JSON.
    if command -v jq >/dev/null 2>&1; then
        echo "$RESPONSE" | jq .
    else
        echo "$RESPONSE"
    fi
}

# Make the bot leave a specific guild
leaveguild() {
    require_token
    GUILD_ID="$1"
    [ -z "$GUILD_ID" ] && error "Usage: aura leaveguild [guild_id]"
    # This command assumes your bot supports leaving a guild via an API call.
    echo "Making the bot leave guild '$GUILD_ID'..."
    RESPONSE=$(curl -s -X DELETE "https://discord.com/api/v10/guilds/$GUILD_ID" \
      -H "Authorization: Bot $(cat "$TOKEN_FILE")")
    if [ -z "$RESPONSE" ]; then
        echo "Bot has left guild '$GUILD_ID'."
    else
        echo "Response: $RESPONSE"
    fi
}

####################################
# Command-Line Interface
####################################

case "$1" in
    help)
        echo -e "\nâœ¨ Aura CLI - Help Menu âœ¨\n"
        echo -e "Available commands:\n"
        echo -e "ðŸ”¹ \033[1mrun [file.js] [-b]\033[0m"
        echo -e "   Runs the specified file. Use '-b' to run in the background (with pm2).\n"
        echo -e "ðŸ”¹ \033[1mrestart [file.js] [-b]\033[0m"
        echo -e "   Stops the current bot and restarts it with the specified file.\n"
        echo -e "ðŸ”¹ \033[1mstop\033[0m"
        echo -e "   Stops the bot, regardless of how it was started.\n"
        echo -e "ðŸ”¹ \033[1muptime\033[0m"
        echo -e "   Displays the uptime of the bot.\n"
        echo -e "ðŸ”¹ \033[1mdebug\033[0m"
        echo -e "   Displays internal bot debugging information.\n"
        echo -e "ðŸ”¹ \033[1mstatus\033[0m"
        echo -e "   Shows bot uptime, CPU/memory usage, system load, and ping.\n"
        echo -e "ðŸ”¹ \033[1mlogs [lines]\033[0m"
        echo -e "   Fetches the latest logs from the bot (default: 20 lines).\n"
        echo -e "ðŸ”¹ \033[1merrors\033[0m"
        echo -e "   Shows the latest errors and stack traces.\n"
        echo -e "ðŸ”¹ \033[1msetstatus [status]\033[0m"
        echo -e "   Sets the botâ€™s presence (e.g., online, idle, dnd).\n"
        echo -e "ðŸ”¹ \033[1msetactivity [type] [message]\033[0m"
        echo -e "   Sets bot activity (e.g., Playing, Watching, Listening).\n"
        echo -e "ðŸ”¹ \033[1mblacklistguild [guild_id]\033[0m"
        echo -e "   Bans a server from using the bot.\n"
        echo -e "ðŸ”¹ \033[1mwhitelistguild [guild_id]\033[0m"
        echo -e "   Removes a server from the blacklist.\n"
        echo -e "ðŸ”¹ \033[1mwebhook [add|remove] [url]\033[0m"
        echo -e "   Adds or removes a webhook for bot logs.\n"
        echo -e "ðŸ”¹ \033[1mguilds\033[0m"
        echo -e "   Lists all guilds the bot is in (via Discord API if permitted).\n"
        echo -e "ðŸ”¹ \033[1mleaveguild [guild_id]\033[0m"
        echo -e "   Makes the bot leave a specific server.\n"
        echo -e "ðŸ”¹ \033[1mset-token [token]\033[0m"
        echo -e "   Sets the bot's token (mandatory for many commands).\n"
        echo -e "ðŸ”¹ \033[1mremove-token\033[0m"
        echo -e "   Removes the bot's token.\n"
        echo -e "ðŸ”¹ \033[1mset-clientid [client_id]\033[0m"
        echo -e "   Sets the bot's client ID (if required).\n"
        echo -e "ðŸ”¹ \033[1mremove-clientid\033[0m"
        echo -e "   Removes the bot's client ID.\n"
        echo -e "Example usage:\n"
        echo -e "  aura run server.js\n  aura run server.js -b\n  aura restart server.js\n  aura restart server.js -b\n  aura stop\n  aura uptime\n  aura debug\n  aura status\n  aura logs 30\n  aura errors\n  aura setstatus idle\n  aura setactivity Playing \"Chess with AI\"\n  aura blacklistguild 123456789\n  aura whitelistguild 123456789\n  aura webhook add https://example.com/webhook\n  aura webhook remove https://example.com/webhook\n  aura guilds\n  aura leaveguild 123456789\n  aura set-token YOUR_TOKEN_HERE\n  aura remove-token\n  aura set-clientid YOUR_CLIENT_ID\n  aura remove-clientid\n"
        ;;
    run)
        [ "$#" -lt 2 ] && error "Usage: aura run [file].js [-b]"
        FILE="$2"
        BG=0
        [ "$3" = "-b" ] && BG=1
        run_bot "$FILE" "$BG"
        ;;
    restart)
        [ "$#" -lt 2 ] && error "Usage: aura restart [file].js [-b]"
        FILE="$2"
        ARG=""
        [ "$3" = "-b" ] && ARG="-b"
        restart_bot "$FILE" "$ARG"
        ;;
    stop)
        stop_bot
        ;;
    uptime)
        uptime_cmd
        ;;
    debug)
        debug_info
        ;;
    status)
        status
        ;;
    logs)
        LINES="${2:-20}"
        logs "$LINES"
        ;;
    errors)
        errors
        ;;
    setstatus)
        setstatus "$2"
        ;;
    setactivity)
        setactivity "$2" "$3"
        ;;
    blacklistguild)
        blacklistguild "$2"
        ;;
    whitelistguild)
        whitelistguild "$2"
        ;;
    webhook)
        if [ "$2" = "add" ]; then
            webhook_add "$3"
        elif [ "$2" = "remove" ]; then
            webhook_remove "$3"
        else
            error "Usage: aura webhook [add|remove] [url]"
        fi
        ;;
    guilds)
        guilds
        ;;
    leaveguild)
        leaveguild "$2"
        ;;
    set-token)
        set_token "$2"
        ;;
    remove-token)
        remove_token
        ;;
    set-clientid)
        set_clientid "$2"
        ;;
    remove-clientid)
        remove_clientid
        ;;
    *)
        echo "Unknown command: $1"
        exit 1
        ;;
esac
